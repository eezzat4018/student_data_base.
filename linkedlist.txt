void add_in_tail()
    {
        struct node *temp;
        temp = (struct node *)malloc(sizeof(struct node));

        inputNodeData(temp);
        temp->next = NULL;
        if(head == NULL)
        {
            head = temp;

            }
            else
            {
                struct node *prev;
                  prev=head;
            while( prev->next != NULL)
            {
                prev = prev->next;
            }
            prev->next=temp;

            }

    }

   int length()
    {
        int count =0;
        struct node *temp;
        temp = head;
        while (temp != NULL)
        {
          count++;
          temp=temp->next;

        }
        return count;
    }
void display_linkedlist()
    {
        struct node * temp ;
        temp =head;
        if (temp==NULL)
        {
            printf("\n list is empty \n");
        }
        else
        {
            while(temp !=NULL)
            {
                students_node_data(&temp->data);
                temp=temp->next;

             }
            printf("\n\n");
        }
    }



void add_at_head()
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));

    inputNodeData(temp);
    temp->next=NULL;
    if(head == NULL)
        {
            head = temp;

        }
        else
        {
            temp->next=head;
            head=temp;
        }

}
void students_node_data(struct node * d)
{
    printstudenteData( &d ->data);
}

void printstudenteData(struct student * stds)
{
    printf("\n first name:\t %s\n", stds->first_name);
    printf(" last name:\t %s\n", stds->surname);
    printf(" roll.no:\t %d\n", stds->roll_no);
    printf("\n birthday:\t %s\n", stds->birthday);
    printf("\n score:\t %d\n", stds->score);

}
void inputNodeData(struct node * d)
{
   studentsinputdata(& d->data);
}
void studentsinputdata(struct student *stds)
{
    printf("\nEnter the first name of the student: ");
    scanf("%s", &(stds->first_name));
    printf("\nEnter the last name of the student: ");
    scanf("%s", &(stds-> surname));
    printf("\nEnter the roll.no of the student: ");
    scanf("%d", &(stds->roll_no));
    printf("\nstudent date of birthday dd/mm/yyyy: ");
    scanf("%s", &(stds-> birthday));
    printf("\nEnter the score of the student: ");
    scanf("%d", &(stds->score));
    printf("\nRecord entered !\n");
}
void addafter()
{ int loc;
    struct node *temp,*prev;
    printf("\n enter the number of student from where you want to enter a node ");
    scanf("%d",&loc);
    if(loc>length())
    {
        printf("\n Error");
    }
    else
    {
        int i=1;
        prev = head;
        while (i<loc)
        {
            prev=prev->next;
            i++;
        }
        temp =(struct node*)malloc(sizeof(struct node));

       inputNodeData(temp);
        temp->next=NULL;
        temp->next= prev->next;
        prev->next=temp;

    }
}
void insert_node (){
    int pos;
        printf("\n enter 1 insert a student at start\nenter 2 insert a student at middle\nenter 3 insert a student at end");
        printf("\n Enter your choice \n");
        scanf("%d",&pos);
       switch(pos)
        {
            case 1: add_at_head();
            break;

            case 2: addafter();
            break;

            case 3: add_in_tail();
            break;

        }
    }
    void calc_time_linkedlist() {
     clock_t start = clock();
    insert_node();
     clock_t stop = clock();
    double elapsed = (double)(stop -  start) * 1000.0 / CLOCKS_PER_SEC;
    printf("Time elapsed in ms: %f", elapsed);}
